<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Signage Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: #1f2937;
        }
        .container {
            max-width: 1200px;
            width: 100%;
            padding: 1rem;
        }
        .dashboard-panel {
            background-color: white;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            min-height: 600px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .signage-content-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            width: 100%;
        }
        .signage-card {
            padding: 2rem;
            border-radius: 1rem;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: transform 0.2s ease-in-out;
        }
        .signage-card:hover {
            transform: translateY(-5px);
        }
        .signage-card h3 {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.75rem;
        }
        .signage-card p {
            font-size: 1rem;
            color: #4b5563;
            line-height: 1.6;
        }
        .signage-card img {
            max-width: 100%;
            border-radius: 0.75rem;
            margin-top: 1rem;
        }
        .message-box {
            position: fixed;
            top: 1rem;
            right: 1rem;
            background-color: #10b981;
            color: white;
            padding: 1rem 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            z-index: 100;
            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
            transform: translateY(-100px);
            opacity: 0;
        }
        .message-box.visible {
            transform: translateY(0);
            opacity: 1;
        }
    </style>
</head>
<body>

    <div class="container">
        <!-- Dashboard Panel for Displaying Signage Content -->
        <div class="dashboard-panel">
            <h1 class="text-3xl lg:text-5xl font-extrabold mb-4 text-center">Digital Signage</h1>
            <p class="text-lg lg:text-xl text-center text-gray-500 mb-8">Live updates from the admin panel</p>
            <div id="loading" class="text-xl text-gray-400">Loading content...</div>
            <div id="signage-content-container" class="signage-content-grid">
                <!-- Signage content will be injected here -->
            </div>
        </div>
    </div>

    <!-- Message box for success/error messages -->
    <div id="message-box" class="message-box"></div>

    <!-- Firebase Scripts -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Set log level for debugging
        setLogLevel('debug');

        // Global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- Firebase Initialization and Authentication ---
        let app, db, auth;
        try {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);
        } catch (e) {
            console.error("Firebase initialization failed:", e);
        }

        // --- DOM Elements ---
        const loadingEl = document.getElementById('loading');
        const signageContentContainer = document.getElementById('signage-content-container');
        const messageBoxEl = document.getElementById('message-box');

        // Array of background colors to cycle through
        const backgroundColors = [
            'bg-indigo-50', 'bg-blue-50', 'bg-green-50', 'bg-yellow-50', 'bg-red-50',
            'bg-purple-50', 'bg-pink-50', 'bg-cyan-50', 'bg-teal-50', 'bg-amber-50'
        ];
        
        // Function to display a temporary message box
        const showMessage = (message, isError = false) => {
            messageBoxEl.textContent = message;
            messageBoxEl.style.backgroundColor = isError ? '#ef4444' : '#10b981';
            messageBoxEl.classList.add('visible');
            setTimeout(() => {
                messageBoxEl.classList.remove('visible');
            }, 3000);
        };

        // Handles user authentication state changes
        onAuthStateChanged(auth, async (user) => {
            if (!user) {
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                        console.log("Signed in with custom token.");
                    } else {
                        await signInAnonymously(auth);
                        console.log("Signed in anonymously.");
                    }
                } catch (error) {
                    console.error("Firebase Auth error:", error);
                }
            }
        });

        // --- Firestore Data Management and Rendering ---
        const collectionPath = `artifacts/${appId}/public/data/signage_content`;

        // Function to render all content on the dashboard
        const renderAllContent = (docs) => {
            loadingEl.style.display = 'none';
            signageContentContainer.innerHTML = '';

            if (docs.length === 0) {
                signageContentContainer.innerHTML = '<p class="text-xl text-gray-400 text-center col-span-full">No content available yet. Add some from the admin panel!</p>';
                return;
            }

            // Render on the dashboard
            docs.forEach((doc, index) => {
                const item = doc.data();
                const cardEl = document.createElement('div');
                cardEl.className = `signage-card ${backgroundColors[index % backgroundColors.length]}`;
                
                let contentHTML = `
                    <h3 class="text-gray-800">${item.title}</h3>
                    <p class="text-gray-600">${item.message}</p>
                `;
                if (item.imageUrl) {
                    contentHTML += `<img src="${item.imageUrl}" alt="${item.title}" onerror="this.onerror=null;this.src='https://placehold.co/400x300/D1D5DB/1F2937?text=Image+Not+Found';">`;
                }
                cardEl.innerHTML = contentHTML;
                signageContentContainer.appendChild(cardEl);
            });
        };

        // Listen for real-time updates from Firestore
        const unsubscribe = onSnapshot(collection(db, collectionPath), (snapshot) => {
            console.log("Firestore update received.");
            const docs = [];
            snapshot.forEach(doc => {
                docs.push({ id: doc.id, ...doc.data() });
            });
            // Sort by timestamp for consistent order
            docs.sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0));
            renderAllContent(docs);
        }, (error) => {
            console.error("Error fetching documents:", error);
            loadingEl.textContent = 'Failed to load content. Check the console for errors.';
            showMessage('Error fetching content!', true);
        });
    </script>
</body>
</html>
